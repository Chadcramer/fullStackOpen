{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","message","map","i","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"mOAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCNpCK,EAAU,kCAmBD,EAjBA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAClB,OAAOA,EAASC,SAcL,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCZrCK,EAAS,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uGA4GSC,EAvGH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,0BAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAEKvB,MAAK,SAAAwB,GACNT,EAASS,QAEZ,IAEHC,QAAQC,IAAI,SAAUZ,EAAMa,OAAQ,SAEpC,IAqBMC,EAAcV,EAChBJ,EACAA,EAAMe,QAAO,SAAAvC,GAAI,OAAIA,EAAKG,aAkC9B,OACE,6BACE,qCACA,mBAfiB,SAAC,GAAiB,IAAfqC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,yBAAKpC,UAAU,SACZoC,KAQH,CAAcA,QAASV,IACvB,6BACE,4BAAQxB,QAAS,kBAAMuB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGU,EAAYG,KAAI,SAACzC,EAAM0C,GAAP,OACf,kBAAC,EAAD,CACEC,IAAKD,EACL1C,KAAMA,EACNC,iBAAkB,kBA9CD,SAACc,GAC1B,IAAMf,EAAOwB,EAAMoB,MAAK,SAAAC,GAAC,OAAIA,EAAE9B,KAAOA,KAChC+B,EAAW,eAAQ9C,EAAR,CAAcG,WAAYH,EAAKG,YAEhD8B,EACUlB,EAAI+B,GACXpC,MAAK,SAAAqC,GACJtB,EAASD,EAAMiB,KAAI,SAAAzC,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAO+C,SAEpDC,OAAM,SAAAC,GACLlB,EAAgB,QAAD,OACL/B,EAAKK,QADA,qCAGf6C,YAAW,WACTnB,EAAgB,QACf,KACHN,EAASD,EAAMe,QAAO,SAAAM,GAAC,OAAIA,EAAE9B,KAAOA,SA8BRoC,CAAmBnD,EAAKe,WAItD,0BAAMqC,SA3EM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBlD,QAASqB,EACT8B,MAAM,IAAIC,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,IAG7B3B,EACUsB,GACP7C,MAAK,SAAAqC,GACJtB,EAASD,EAAMqC,OAAOd,IACtBpB,EAAW,SAgEX,2BACEmC,MAAOpC,EACPqC,SA9DiB,SAACV,GACxBlB,QAAQC,IAAIiB,EAAMW,OAAOF,OACzBnC,EAAW0B,EAAMW,OAAOF,UA8DpB,4BAAQG,KAAK,UAAb,SAEF,kBAAE,EAAF,Q,MC5FNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.1eb00d5b.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important';\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n      </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => {\n    return response.data;\n  })\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { \n  getAll,\n  create,\n  update\n}","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('') \n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...');\n\n  useEffect(() => {\n    noteService\n      .getAll()\n        .then(initialNotes => {\n        setNotes(initialNotes);\n      })\n  }, [])\n\n  console.log('render', notes.length, 'notes')\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    }\n  \n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note ${note.content} was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>      \n      <ul>\n        {notesToShow.map((note, i) => \n          <Note \n            key={i} \n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>  \n      < Footer /> \n    </div>\n  )\n}\n\nexport default App ","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css';\n\nconst notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2020-01-10T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only Javascript',\n    date: '2020-01-10T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2020-01-10T19:20:14.298Z',\n    important: true\n  }\n]\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}